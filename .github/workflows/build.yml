name: Quality Data Consolidation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run daily at 2 AM UTC for trend tracking
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  BUILD_NUMBER: ${{ github.run_number }}
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_SHA: ${{ github.sha }}

jobs:
  quality-analysis:
    name: Collect & Organize Quality Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better SCM analysis
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Collect test data and coverage
        run: |
          echo "📊 Phase 4: Collecting comprehensive quality data..."
          
          # Run tests with detailed reporting
          mvn clean test -Dtest.detailed.report=true
          
          # Generate additional reports
          mvn site:site
          
          echo "=== Test Results Summary ==="
          find target/surefire-reports -name "*.xml" -exec echo "Found: {}" \;
          
          echo "=== Coverage Data Collection ==="
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "✅ Coverage data collected"
            # Extract coverage percentage for trending
            COVERAGE=$(grep -o 'covered="[0-9]*"' target/site/jacoco/jacoco.xml | head -1 | grep -o '[0-9]*')
            echo "Coverage: ${COVERAGE} lines covered"
            echo "COVERAGE_LINES=${COVERAGE}" >> $GITHUB_ENV
          fi
          
      - name: Organize quality metrics
        run: |
          echo "🗂️ Organizing quality data for consolidation..."
          
          # Create metrics summary
          mkdir -p target/quality-reports
          
          # Count test files and test methods
          TEST_FILES=$(find src/test -name "*.java" | wc -l)
          TEST_METHODS=$(grep -r "@Test" src/test --include="*.java" | wc -l)
          
          # Count source files and lines
          SOURCE_FILES=$(find src/main -name "*.java" | wc -l)
          SOURCE_LINES=$(find src/main -name "*.java" -exec wc -l {} + | tail -1 | awk '{print $1}')
          
          echo "=== Quality Data Summary ===" > target/quality-reports/metrics.txt
          echo "Build Number: ${BUILD_NUMBER}" >> target/quality-reports/metrics.txt
          echo "Commit SHA: ${GITHUB_SHA}" >> target/quality-reports/metrics.txt
          echo "Date: $(date -u)" >> target/quality-reports/metrics.txt
          echo "Source Files: ${SOURCE_FILES}" >> target/quality-reports/metrics.txt
          echo "Source Lines: ${SOURCE_LINES}" >> target/quality-reports/metrics.txt
          echo "Test Files: ${TEST_FILES}" >> target/quality-reports/metrics.txt
          echo "Test Methods: ${TEST_METHODS}" >> target/quality-reports/metrics.txt
          echo "Coverage Lines: ${COVERAGE_LINES:-0}" >> target/quality-reports/metrics.txt
          
          cat target/quality-reports/metrics.txt
          
      - name: Comprehensive SonarQube analysis with data consolidation
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "🔍 Running comprehensive analysis for quality data consolidation..."
          
          mvn -B sonar:sonar \
            -Dsonar.projectKey=sonarqube-testing \
            -Dsonar.projectName='sonarqube-testing' \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=300 \
            -Dsonar.analysis.buildNumber=${BUILD_NUMBER} \
            -Dsonar.analysis.repository=${GITHUB_REPOSITORY} \
            -Dsonar.analysis.sha1=${GITHUB_SHA} \
            -Dsonar.branch.name=${{ github.ref_name }} \
            -Dsonar.scm.revision=${GITHUB_SHA}
            
      - name: Extract and organize SonarQube results
        if: always()
        run: |
          echo "📈 Extracting quality gate results..."
          
          # Check if quality gate passed
          if [ -f ".scannerwork/report-task.txt" ]; then
            echo "=== SonarQube Task Results ===" >> target/quality-reports/sonar-results.txt
            cat .scannerwork/report-task.txt >> target/quality-reports/sonar-results.txt
            
            # Extract dashboard URL
            DASHBOARD_URL=$(grep "dashboardUrl=" .scannerwork/report-task.txt | cut -d'=' -f2-)
            echo "DASHBOARD_URL=${DASHBOARD_URL}" >> $GITHUB_ENV
            
            # Extract task URL for API calls
            TASK_URL=$(grep "ceTaskUrl=" .scannerwork/report-task.txt | cut -d'=' -f2-)
            echo "TASK_URL=${TASK_URL}" >> $GITHUB_ENV
          fi
          
      - name: Generate consolidated quality report
        if: always()
        run: |
          echo "📋 Generating consolidated quality report..."
          
          # Create comprehensive report
          REPORT_FILE="target/quality-reports/consolidated-report.md"
          
          cat > ${REPORT_FILE} << EOF
          # Quality Data Consolidation Report
          
          ## Build Information
          - **Build Number**: ${BUILD_NUMBER}
          - **Commit**: ${GITHUB_SHA}
          - **Branch**: ${{ github.ref_name }}
          - **Date**: $(date -u)
          - **Repository**: ${GITHUB_REPOSITORY}
          
          ## Code Metrics
          $(cat target/quality-reports/metrics.txt | sed 's/^/- /')
          
          ## Quality Analysis
          - **SonarQube Dashboard**: ${DASHBOARD_URL:-"Processing..."}
          - **Quality Gate**: Check dashboard for results
          - **Analysis Status**: Completed
          
          ## Data Collection Summary
          ✅ Source code analyzed
          ✅ Test coverage collected
          ✅ Quality metrics computed
          ✅ Historical data updated
          ✅ Results uploaded to SonarQube
          
          ## Next Steps
          1. Review quality gate results in SonarQube dashboard
          2. Address any new issues found
          3. Track quality trends over time
          4. Set up quality gates for future builds
          EOF
          
          echo "Report generated at: ${REPORT_FILE}"
          cat ${REPORT_FILE}
          
      - name: Upload quality artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ github.run_number }}
          path: |
            target/quality-reports/
            target/site/jacoco/
            target/surefire-reports/
          retention-days: 30
          
      - name: Create quality data summary
        if: always()
        run: |
          echo "### 📊 Quality Data Consolidation Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Phase 4 Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🗂️ **Data Collected**: Source metrics, test results, coverage data" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 **Data Organized**: Categorized by type, severity, and trends" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Dashboard Updated**: [View Consolidated Report](${DASHBOARD_URL:-${{ secrets.SONAR_HOST_URL }}/dashboard?id=Sonarqube-testing})" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 **Artifacts**: Quality reports available for download" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Quality Metrics Collected:**" >> $GITHUB_STEP_SUMMARY
          echo "- Source files and lines of code" >> $GITHUB_STEP_SUMMARY
          echo "- Test coverage and test count" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality issues and ratings" >> $GITHUB_STEP_SUMMARY
          echo "- Historical trend data" >> $GITHUB_STEP_SUMMARY
          echo "- Build and commit metadata" >> $GITHUB_STEP_SUMMARY