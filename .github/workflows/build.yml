name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

jobs:
  sonarqube-analysis:
    name: SonarQube Static Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
          
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Run tests and generate coverage
        run: |
          echo "üß™ Running unit tests with coverage..."
          mvn clean test
          echo "üìä Coverage report generated at: target/site/jacoco/jacoco.xml"
          
      - name: Verify test results
        run: |
          echo "=== Test Results ==="
          if [ -d "target/surefire-reports" ]; then
            echo "‚úÖ Test reports found:"
            ls -la target/surefire-reports/
          else
            echo "‚ùå No test reports found"
          fi
          
          echo "=== Coverage Results ==="
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "‚úÖ Coverage report found:"
            echo "Coverage file size: $(wc -l < target/site/jacoco/jacoco.xml) lines"
          else
            echo "‚ùå Coverage report missing"
          fi
          
      - name: Perform SonarQube analysis and upload results
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "üîç Starting SonarQube static analysis..."
          echo "üì° Uploading results to: $SONAR_HOST_URL"
          
          mvn -B sonar:sonar \
            -Dsonar.projectKey=sonarqube-testing \
            -Dsonar.projectName='sonarqube-testing' \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.junit.reportPaths=target/surefire-reports \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.verbose=true
            
      - name: Generate Analysis Summary
        if: always()
        run: |
          echo "### üîç SonarQube Static Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- üìä [View Full Report in SonarQube](${{ secrets.SONAR_HOST_URL }}/dashboard?id=Sonarqube-testing)" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ Tests: $(find target/surefire-reports -name "*.xml" 2>/dev/null | wc -l) test files" >> $GITHUB_STEP_SUMMARY
          echo "- üìà Coverage: Report generated and uploaded" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Static Analysis: Code quality metrics calculated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**What was analyzed:**" >> $GITHUB_STEP_SUMMARY
          echo "- Source code quality (bugs, vulnerabilities, code smells)" >> $GITHUB_STEP_SUMMARY
          echo "- Test coverage percentage" >> $GITHUB_STEP_SUMMARY
          echo "- Code complexity and maintainability" >> $GITHUB_STEP_SUMMARY
          echo "- Security vulnerabilities" >> $GITHUB_STEP_SUMMARY